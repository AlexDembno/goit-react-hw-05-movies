{"version":3,"file":"static/js/462.43c4e0c1.chunk.js","mappings":"uQACA,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAyF,0BAAzF,EAA0H,wB,SCwC1H,MApCA,YAAmC,IAAdA,EAAa,EAAbA,UACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAaA,OACE,+BACE,kBAAMC,UAAWC,EAAaC,SAbd,SAAAC,GAClBA,EAAEC,iBACFR,EAAUE,GACVC,EAAU,GACX,EASG,WACE,kBACEC,UAAWC,EACXI,KAAK,SACLC,MAAOR,EACPS,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,UAAQ,EACRC,SAjBY,SAAAT,GAClB,IAAQG,EAAUH,EAAEU,OAAZP,MACRP,EAAUO,EACX,KAgBK,mBAAQN,UAAWC,EAAeM,KAAK,SAAvC,UACE,iBAAMP,UAAWC,EAAjB,0BAKT,ECtCD,EAA0B,wBAA1B,EAAyD,qBCwDzD,MAjDA,WACE,OAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOiB,EAAP,KAAiBC,EAAjB,KACA,GAA6BlB,EAAAA,EAAAA,UAAS,MAAtC,eAAOmB,EAAP,KAAiBC,EAAjB,KACA,GAA6BpB,EAAAA,EAAAA,WAAS,GAAtC,eAAOqB,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMxB,EAASuB,EAAaE,IAAI,UAC1BC,GAAWC,EAAAA,EAAAA,MAyBjB,OAlBAC,EAAAA,EAAAA,YAAU,WACR,GAAK5B,EAAL,CAGA,IAAM6B,EAAK,mCAAG,oGAEVR,GAAU,GAFA,UAGSS,EAAAA,EAAAA,IAAc9B,GAHvB,OAGJ+B,EAHI,OAIVd,EAAYc,EAAKA,KAAKC,SAJZ,gDAMVb,EAAS,KAASc,SANR,yBAQVZ,GAAU,GARA,4EAAH,qDAWXQ,GAZC,CAaF,GAAE,CAACX,EAAUlB,KAGZ,iCACE,SAAC,EAAD,CAAWF,UAzBG,SAAAE,GAChBwB,EAAgB,CAAExB,OAAAA,IAClBiB,EAAY,GACb,KAuBG,gBAAIf,UAAWC,EAAf,UACGiB,IAAW,SAACc,EAAA,EAAD,KACVd,GACAJ,EAASmB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACX,eAAInC,UAAWC,EAAf,UACE,SAAC,KAAD,CAAMmC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMd,GAA1C,SACGW,KAF4BD,EADtB,SAUtB,C,oKCrDDK,EAAAA,EAAAA,SAAAA,QAAA,gCACA,IAAMC,EAAU,mCAEHZ,EAAgB,SAAA9B,GAAM,OACjCyC,EAAAA,EAAAA,IAAA,gCAC2BC,EAD3B,kBAC4C1C,EAD5C,+BADiC,EAKtB2C,EAAiB,SAAAP,GAAE,OAC9BK,EAAAA,EAAAA,IAAA,iBAAoBL,EAApB,oBAAkCM,EAAlC,mBAD8B,EAGnBE,EAAqB,kBAChCH,EAAAA,EAAAA,IAAA,sCAAyCC,GADT,EAGrBG,EAAmB,SAAAT,GAAE,OAChCK,EAAAA,EAAAA,IAAA,iBAAoBL,EAApB,4BAA0CM,EAA1C,mBADgC,EAGrBI,EAAsB,SAAAV,GAAE,OACnCK,EAAAA,EAAAA,IAAA,iBAAoBL,EAApB,4BAA0CM,EAA1C,0BADmC,C","sources":["webpack://react-homework-template/./src/components/SearchBox/SearchBox.module.css?45fa","components/SearchBox/SearchBox.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","shared/services/Film-Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchBox_form__GByKm\",\"input\":\"SearchBox_input__+nuoc\",\"button\":\"SearchBox_button__lPD4d\",\"span\":\"SearchBox_span__O6EY9\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './SearchBox.module.css';\n\nfunction SearchBox({ getSearch }) {\n  const [search, setSearch] = useState('');\n\n  const handlSubmit = e => {\n    e.preventDefault();\n    getSearch(search);\n    setSearch('');\n  };\n\n  const handlSearch = e => {\n    const { value } = e.target;\n    setSearch(value);\n  };\n\n  return (\n    <>\n      <form className={styles.form} onSubmit={handlSubmit}>\n        <input\n          className={styles.input}\n          name=\"search\"\n          value={search}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search films\"\n          required\n          onChange={handlSearch}\n        />\n        <button className={styles.button} type=\"submit\">\n          <span className={styles.span}>Search</span>\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default SearchBox;\n\nSearchBox.propTypes = {\n  getSearch: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Movies_wrapper__RVmCE\",\"list\":\"Movies_list__hqYjd\"};","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { searchFilmApi } from 'shared/services/Film-Api';\nimport Loader from 'components/Loader/Loader';\nimport SearchBox from 'components/SearchBox/SearchBox';\n\nimport styles from './Movies.module.css';\n\nfunction Movies() {\n  const [articles, setArticles] = useState([]);\n  const [response, setError] = useState(null);\n  const [loading, setLoader] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n  const location = useLocation();\n\n  const getSearch = search => {\n    setSearchParams({ search });\n    setArticles([]);\n  };\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n    const fetch = async () => {\n      try {\n        setLoader(true);\n        const data = await searchFilmApi(search);\n        setArticles(data.data.results);\n      } catch (response) {\n        setError(response.message);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetch();\n  }, [response, search]);\n\n  return (\n    <>\n      <SearchBox getSearch={getSearch} />\n      <ul className={styles.wrapper}>\n        {loading && <Loader />}\n        {!loading &&\n          articles.map(({ id, title }) => (\n            <li className={styles.list} key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst API_KEY = '6c57fb02719926393bb8c06aa147886f';\n\nexport const searchFilmApi = search =>\n  axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${search}&page=1&include_adult=false`\n  );\n\nexport const searchFilmByID = id =>\n  axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n\nexport const searchFilmTrending = () =>\n  axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\nexport const searchFilmByCast = id =>\n  axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n\nexport const searchFilmByReviews = id =>\n  axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n"],"names":["getSearch","useState","search","setSearch","className","styles","onSubmit","e","preventDefault","name","value","type","autoComplete","autoFocus","placeholder","required","onChange","target","articles","setArticles","response","setError","loading","setLoader","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","fetch","searchFilmApi","data","results","message","Loader","map","id","title","to","state","from","axios","API_KEY","searchFilmByID","searchFilmTrending","searchFilmByCast","searchFilmByReviews"],"sourceRoot":""}